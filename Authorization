//routes/web.php
Route::get('conversations','ConversationsController@index');
Route::get('conversations/{conversation}','ConversationsController@show')->middleware('can:view,conversation');
Route::post('best-replies/{reply}','ConversationBestReplyController@store');
Auth::routes();

//App\conversation.php
<?php
namespace App;
use Illuminate\Database\Eloquent\Model;
class Conversation extends Model
{
    public function setBestReply(Reply $reply)
    {
        $this->best_reply_id = $reply->id;
        $this->save();
    }
    public function user()
    {
        return $this->belongsTo(User::class);
    }

    public function replies()
    {
        return $this->hasMany(Reply::class);
    }
}

//App\Reply.php
<?php
namespace App;
use App\Http\Controllers\ConversationBestReplyController;
use Illuminate\Database\Eloquent\Model;
class Reply extends Model
{
    public function isBest()
    {
        return $this->id === $this->conversation->best_reply_id;
    }
    public function conversation()
    {
        return $this->belongsTo(Conversation::class);
    }
    public function user()
    {
        return $this->belongsTo(User::class);
    }
}

//App/User.php
<?php
namespace App;
use Illuminate\Contracts\Auth\MustVerifyEmail;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;
class User extends Authenticatable
{
    use Notifiable;

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = [
        'name', 'email', 'password',
    ];

    /**
     * The attributes that should be hidden for arrays.
     *
     * @var array
     */
    protected $hidden = [
        'password', 'remember_token',
    ];

    /**
     * The attributes that should be cast to native types.
     *
     * @var array
     */
    protected $casts = [
        'email_verified_at' => 'datetime',
    ];

    public function conversations(){
        return $this->hasMany(Conversation::class);
    }

    public function replies()
    {
        return $this->hasMany(Reply::class);
    }
}


//creating controllers
//APP\Http\Controllers\ConversationsController.php
<?php
namespace App\Http\Controllers;
use App\Conversation;
use Illiminate\Http\Request;
class ConversationsController extends Controller
{
     public function index()
    {
        return view('conversations.index ',[
            'conversations'=>Conversation::all()
        ]);
    }  
    public function show(Conversation $conversation)
    {
        //$this->authorize('view',$conversation);
        return view('conversations.show',[
            'conversation' => $conversation
        ]);
    } 
}

\\resources/views/conversation/replies.blade.php
@foreach($conversation->replies as $reply)
    <div>
        <header style="display: flex; justify-content: space-between;">
            <p class='m-0'><strong>{{$reply->user->name}} said...</strong></p>

            @if($reply->isBest())
                <span style="color:green;">Best Reply!!</span>
            @endif
        </header>

        {{$reply->body}}

        @can ('update',$conversation)
            <form method="POST" action="/best-replies/{{ $reply->id }}">
            @csrf

                <button 
                    type="submit"
                    class="btn p-0 text-muted"
                > Best Reply? 
                </button>
            </form>
        @endcan
    </div>
    @continue($loop->last)
    <hr>
@endforeach

\\resources/views/conversation/show.blade.php
@extends('layouts.app')
@section('content')
<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <p>
                <a href="/conversations">Back</a>
                <h1>{{$conversation->title}}</h1>
                <p class="text-muted">Posted By {{$conversation->user->name}} .</p>
                <div>
                    {{$conversation->body}}
                </div>
                <hr>
                @include('conversations.replies')
            </p>
        </div>
    </div>
</div>
@endsection

\\resources/views/conversation/index.blade.php
@extends('layouts.app')
@section('content')
<div class="container">
    <div class ="row justify-content-center">
        <div class="col-md-8">
            @foreach($conversations as $conversation)
                <h2><a href="/conversations/{{ $conversation->id}}">{{$conversation->title}}</a></h2>
                @continue($loop->last)
                <hr>
            @endforeach
        </div>
    </div>
</div>
@endsection

//database\factories/conversationFactory.php
<?php
/** @var \Illuminate\Database\Eloquent\Factory $factory */
use App\Conversation;
use Faker\Generator as Faker;
$factory->define(Conversation::class, 
function (Faker $faker) {
    $user=App\User::orderByRaw('RAND()')->first();

    return [
        'user_id'=>$user->id,
        'title'=>$faker->sentence,
        'body'=>$faker->text,
    ];
});

//database\factories/ReplyFactory.php
<?php
/** @var \Illuminate\Database\Eloquent\Factory $factory */
use App\Reply;
use Faker\Generator as Faker;
$factory->define(Reply::class, 
function (Faker $faker) {
    $user=App\User::orderByRaw('RAND()')->first();
    $conversation=App\Conversation::orderByRaw('RAND()')->first();
    return [
        'user_id'=>$user->id,
        'conversation_id'=>$conversation->id,
        'body'=>$faker->sentence,
    ];
});

\\database\migration\create\conversation_table.php
<?php
use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;
class CreateConversationsTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::create('conversations', function (Blueprint $table) {
            $table->bigIncrements('id');
            $table->unsignedBigInteger('user_id');
            $table->string('title');
            $table->text('body');
            $table->unsignedBigInteger('best_reply_id')->nullable();
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::dropIfExists('conversations');
    }
}

\\database\migration\create\conversation_table.php
<?php
use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;
class CreateReplyTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::create('replies', function (Blueprint $table) {
            $table->bigIncrements('id');
            $table->unsignedBigInteger('user_id');
            $table->unsignedBigInteger('conversation_id');
            $table->text('body');
            $table->timestamps();
            $table->foreign('user_id')
                ->references('id')
                ->on('users')
                ->onDelete('cascade');
            $table->foreign('conversation_id')
                ->references('id')
                ->on('conversations')
                ->onDelete('cascade');
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::dropIfExists('replies');
    }
}

\\run php artisan seeder ConversationsSeeder

\\database/seeds/converstionsSeeder.php
<?php

use Illuminate\Database\Seeder;

class ConversationsSeeder extends Seeder
{
    /**
     * Run the database seeds.
     *
     * @return void
     */
    public function run()
    {
        factory(App\User::class,5)->create();
        factory(App\Conversation::class,5)->create();
        factory(App\Reply::class,15)->create();
    }
}
